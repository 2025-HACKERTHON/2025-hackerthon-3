import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios'; 
import qr_btn from '../../assets/img/cus_order/qr_btn.svg';
import starEmpty from '../../assets/img/cus_order/star_empty.png';
import starFilled from '../../assets/img/cus_order/star_filled.png';

const Owner_home_fifth = () => {
  const TOTAL_PAGES = 5;
  const current = 5;
  const navigate = useNavigate();

  const PAGE_SLUGS = ['first', 'second', 'third', 'fourth', 'fifth'];
  const pathFor = (n) => `/owner_home_${PAGE_SLUGS[(n - 1) % TOTAL_PAGES]}`;

  const goNext = () => navigate(pathFor((current % TOTAL_PAGES) + 1));
  const goPrev = () => navigate(pathFor(((current - 2 + TOTAL_PAGES) % TOTAL_PAGES) + 1));

  useEffect(() => {
    const onKey = (e) => {
      if (e.key === 'ArrowRight') { e.preventDefault(); goNext(); }
      else if (e.key === 'ArrowLeft') { e.preventDefault(); goPrev(); }
    };
    window.addEventListener('keydown', onKey);
    return () => window.removeEventListener('keydown', onKey);
  }, []);

  // ‚úÖ API ÏùëÎãµÏùÑ ÌôîÎ©¥ Íµ¨Ï°∞Î°ú Î≥ÄÌôò
  const transformToTables = (apiResult = []) =>
    apiResult.map((row) => {
      const menu = (row.items ?? []).map((it) => `${it.menuName} ${it.quantity}`);
      const cardCountNum = (row.items ?? []).reduce(
        (sum, it) => sum + (Number(it.cardQuantity) || 0),
        0
      );
      const cards = [];
      (row.items ?? []).forEach((it) => {
        const names = Array.isArray(it.cardNames) ? it.cardNames : [];
        names.forEach((name) => {
          const text = String(name || '').trim();
          if (text.length > 0) {
            cards.push({ title: it.menuName, desc: text });
          }
        });
      });

      return {
        num: `ÌÖåÏù¥Î∏î ${row.tableId}`,
        menu,
        cardCount: `Ï£ºÎ¨∏Ïπ¥Îìú ${cardCountNum}Ïû•`,
        cards,
      };
    });

  // ‚úÖ ÌïòÎìúÏΩîÎìú ‚Üí API Ïó∞Îèô ÏÉÅÌÉú
  const [tables, setTables] = useState([]);
  const [openSet, setOpenSet] = useState(new Set());
  const toggleOpen = (idx) => {
    setOpenSet((prev) => {
      const next = new Set(prev);
      if (next.has(idx)) next.delete(idx);
      else next.add(idx);
      return next;
    });
  };

  // ‚úÖ Ï£ºÎ¨∏ ÌòÑÌô© Ìò∏Ï∂ú (/api/orders/current) ‚Äî proxy + Ïø†ÌÇ§ Ï†ÑÏÜ°
  useEffect(() => {
    (async () => {
      try {
        const res = await axios.get('/api/orders/current', {
          withCredentials: true, // JSESSIONID ÏûêÎèô Ï†ÑÏÜ°
        });
        const data = res?.data?.result ?? [];
        setTables(transformToTables(data));
      } catch (err) {
        // UI Î≥ÄÍ≤Ω ÏóÜÏù¥ ÏΩòÏÜîÎßå
        console.error('[orders/current GET error]', {
          status: err?.response?.status,
          data: err?.response?.data,
          err,
        });
      }
    })();
  }, []);

  // ÏµúÏã† Î≥ÑÏ†ê Í∞ÄÏ†∏ÏôÄÏÑú ÌëúÏãú (Í∏∞Î≥∏Í∞í 4Î°ú ÏãúÏûë, Ïã§Ìå® Ïãú Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ)
  const [avgRating, setAvgRating] = useState(4);
  useEffect(() => {
    (async () => {
      try {
        const res = await axios.get('/api/order-ratings/latest', {
          withCredentials: true, // JSESSIONID ÏûêÎèô Ï†ÑÏÜ°
        });
        // ÏùëÎãµ ÏòàÏãú Í∞ÄÏ†ï: { star: 1~5 }
        const star = Number(res?.data?.star);
        if (Number.isFinite(star) && star >= 1 && star <= 5) {
          setAvgRating(star);
        }
      } catch (err) {
        // UI Î≥ÄÍ≤Ω ÏóÜÏù¥ ÏΩòÏÜîÎßå
        console.error('[latest rating GET error]', {
          status: err?.response?.status,
          data: err?.response?.data,
          err,
        });
      }
    })();
  }, []);

  const score = Math.max(1, Math.min(5, Math.round(avgRating)));

  const TITLE_BY_SCORE = {
    1: 'Ï£ºÎ¨∏Ïù¥ ÎÑàÎ¨¥ Î∂àÌé∏ÌñàÏñ¥Ïöî...ü•≤',
    2: 'Î©îÎâ¥ÎÇò Í∏∞Îä•Ïù¥ Ìó∑Í∞àÎ†∏Ïñ¥Ïöî ü§Ø',
    3: 'Í∑∏Îü≠Ï†ÄÎü≠ Ïì∏ Ïàò ÏûàÏóàÏñ¥Ïöî üôÇ',
    4: 'Ïûò ÏçºÍ≥† Ìé∏ÌñàÏñ¥Ïöî üòÑ',
    5: 'ÏóÑÏ≤≠ Ìé∏ÌñàÏñ¥Ïöî! Îòê Ïù¥Ïö©Ìï†ÎûòÏöî! üíñ',
  };

  const DETAIL_BY_SCORE = {
    1: 'QR ÏïàÎÇ¥ ÏúÑÏπòÎÇò ÌÖåÏù¥Î∏î Ïù∏Ïãù ÏÉÅÌÉú, Î≤àÏó≠ ÏÉÅÌÉúÎ•º Îã§Ïãú ÌôïÏù∏ÌïòÎ©¥ Ï¢ãÏùÑ Í≤É Í∞ôÏïÑÏöî.',
    2: 'Ï§ëÏöî Î©îÎâ¥ÎÇò Ï∂îÏ≤ú Î©îÎâ¥Í∞Ä ÎààÏóê ÎùÑÏßÄ ÏïäÍ±∞ÎÇò, Ï∂îÍ∞Ä ÏöîÏ≤≠ Ïπ¥Îìú ÏúÑÏπòÍ∞Ä Î∂ÑÎ™ÖÌïòÏßÄ ÏïäÏïòÏùÑ Í∞ÄÎä•ÏÑ±Ïù¥ ÏûàÏñ¥Ïöî. Î©îÎâ¥ Íµ¨ÏÑ±Í≥º ÏàúÏÑúÎ•º Í∞ÑÎã®ÌïòÍ≤å Ï°∞Ï†ïÌï¥ Î≥¥ÏãúÎ©¥ Ï¢ãÏïÑÏöî.',
    3: 'ÏöîÏ≤≠ÏÇ¨Ìï≠ ÏÑ†ÌÉùÏù¥ÎÇò Í≤∞Ï†ú Îã®Í≥ÑÏóêÏÑú ÏïΩÍ∞ÑÏùò Í≥†ÎØºÏù¥ ÏûàÏóàÏùÑ Ïàò ÏûàÏñ¥Ïöî. ÌÖçÏä§Ìä∏Ïóê Ïù¥Î™®ÏßÄÎ•º Ï∂îÍ∞ÄÌï¥ ÏßÅÍ¥ÄÏÑ±ÏùÑ ÎÜíÏù¥Îäî Í±¥ Ïñ¥ÎïåÏöî?',
    4: 'Ï∂îÏ≤ú Î©îÎâ¥Í∞Ä Ìö®Í≥ºÏ†ÅÏúºÎ°ú Î≥¥ÏòÄÍ≥†, Ï∂îÍ∞Ä ÏöîÏ≤≠ÏÇ¨Ìï≠ÎèÑ Ïûò Î∞òÏòÅÎêú Í≤ÉÏúºÎ°ú Î≥¥Ïó¨Ïöî. Ïô∏Íµ≠Ïñ¥ ÌëúÌòÑ Ï§ë ÏùºÎ∂Ä Ïò§Ìï¥Í∞Ä ÏûàÏùÑ Ïàò ÏûàÏúºÎãà Î≤àÏó≠ ÌëúÌòÑÏùÑ Ìïú Î≤à Îçî Ï†êÍ≤ÄÌï¥Î≥¥ÏÑ∏Ïöî.',
    5: 'QR ÏßÑÏûÖ, Î©îÎâ¥ Íµ¨ÏÑ±, ÏöîÏ≤≠ÏÇ¨Ìï≠ ÏÑ†ÌÉù, Í≤∞Ï†úÍπåÏßÄ Î™®Îëê Îß§ÎÅÑÎüΩÍ≤å Ïó∞Í≤∞ÎêêÏñ¥Ïöî. ÏßÄÍ∏àÏ≤òÎüºÎßå Ïö¥ÏòÅÌïòÏãúÎ©¥ Ïô∏Íµ≠Ïù∏ ÏÜêÎãò Ïû¨Î∞©Î¨∏Ïú®ÎèÑ Îçî Ïò¨ÎùºÍ∞à Í±∞ÏòàÏöî!',
  };

  return (
    <div className='ownerhomefifth_wrap container'>
      <div className="header">
        <button className="qr"><img src={qr_btn} alt="" /></button>
      </div>

      <div className="text">
        <h1>RESTAURANT</h1>
        <h2>ÌïúÍ∑∏Î¶á</h2>
        <div className="on">Ïö¥ÏòÅÏ§ë</div>
      </div>

      <div className="table_list">
        <h1>Ïã§ÏãúÍ∞Ñ Ï£ºÎ¨∏ ÌòÑÌô©</h1>

        {tables.map((t, idx) => (
          <div key={idx} className={`table ${openSet.has(idx) ? 'is-open' : ''}`}>
            <div className="table_left">
              <span className="num">{t.num}</span>
              <div className="menu">
                {t.menu.map((m, i) => <p key={i}>{m}</p>)}
              </div>
              <span className="cnum">{t.cardCount}</span>
            </div>

            <div className="table_right">
              <button className="open" onClick={() => toggleOpen(idx)}>
                {openSet.has(idx) ? 'Ï†ëÍ∏∞' : 'Ïó¥Í∏∞'}
              </button>
              <button className="close">ÏôÑÎ£å</button>
            </div>

            {openSet.has(idx) && (
              <div className="orders_area" aria-live="polite">
                {t.cards.map((c, i) => (
                  <div className="order_card" key={i}>
                    <strong className="title">{c.title}</strong>
                    <p className="desc">{c.desc}</p>
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>

      <div className="trend_section">
        <h1 className="sec_title">ÏµúÍ∑º Ï£ºÎ¨∏ Í≤ΩÌñ•</h1>

        {/* ÏµúÏã† Î≥ÑÏ†ê ÌëúÏãú */}
        <div className="rating">
          <div className="rating_text">{TITLE_BY_SCORE[score]}</div>

          <div className="stars" role="img" aria-label={`Î≥ÑÏ†ê ${score}Ï†ê`}>
            {Array.from({ length: 5 }, (_, i) => (
              <img
                key={i}
                src={i < score ? starFilled : starEmpty}
                alt={i < score ? 'Ï±ÑÏõåÏßÑ Î≥Ñ' : 'Îπà Î≥Ñ'}
                className={i < score ? 'starFilled' : 'starEmpty'}
              />
            ))}
          </div>

          <div className="rating_detail">{DETAIL_BY_SCORE[score]}</div>
        </div>

        <h2 className="sub_title">Ï£ºÎ¨∏ ÎßåÏ°±ÎèÑ</h2>

        <div className="slider_footer">
          <div className="dots">
            {Array.from({ length: TOTAL_PAGES }, (_, i) => {
              const page = i + 1;
              return (
                <button
                  key={page}
                  className={`dot ${page === 5 ? 'active' : ''}`}
                  onClick={() => navigate(pathFor(page))}
                  aria-label={`${page}Î≤à ÌéòÏù¥ÏßÄ`}
                  aria-current={page === 5 ? 'page' : undefined}
                />
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Owner_home_fifth;
